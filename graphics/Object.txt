--@name Object
--@author Xandaros
--@include lib/Class.txt
--@include lib/game/graphics/Sprite.txt
--@include lib/game/graphics/Vector2D.txt
require("lib/Class.txt")
require("lib/game/graphics/Sprite.txt")
require("lib/game/graphics/Vector2D.txt")

Object = Class("Object")

function Object:constructor(pos, dimensions, sprite)
	self.pos = pos
	self.dimensions = dimensions
	self.sprite = sprite
	self.moveInfo = {
		oldPos = nil,
		target = nil,
		time = 0,
		endTime = 0
	}
	self.zIndex = 0
	self.scene = nil
end

function Object:setPos(pos)
	if not pos.getX then throw("DEBUG", 2) end
	self.pos = pos
end

function Object:getZ(zIndex)
	return self.zIndex
end

function Object:think()
	if self.moveInfo.target then
		local move = self.moveInfo
		local curTime = timer.curtime()
		if curTime > move.endTime then
			self:setPos(move.target)
			move.target = nil
		else
			local frac = (curTime - (move.endTime - move.time))/move.time
			local newPos = move.oldPos+(move.target-move.oldPos)*frac
			self:setPos(newPos)
		end
	end
end

function Object:move(pos, time)
	local curTime = timer.curtime()
	local move = self.moveInfo
	move.oldPos = self:getPos()
	move.target = pos
	move.time = time
	move.endTime = curTime + time
end

function Object:setDimensions(dimensions)
	self.dimensions = dimensions
end

function Object:setSprite(sprite)
	self.sprite = sprite
end

function Object:getPos()
	return self.pos
end

function Object:setZ(zIndex)
	if self.scene then
		self.scene:updateZIndex(self, zIndex)
	else
		self.zIndex = zIndex
	end
end

function Object:getDimensions()
	return self.dimensions
end

function Object:getSprite()
	return self.sprite
end

function Object:draw()
	render.selectRenderTarget()
	local pos = self:getPos()
	local mat = Matrix()
	mat:translate(Vector(pos:getX(), pos:getY()))

	render.pushMatrix(mat)
	self:getSprite():draw()
	render.popMatrix()
end

-- vim: set filetype=lua :
